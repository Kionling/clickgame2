{"version":3,"sources":["logo.svg","components/navbar.js","components/score.js","components/cardDesign.js","components/jumbotron.js","components/gamerules.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","nav","fontWeight","Navbar","props","class","style","Score","className","score","topScore","card","width","margin","CardDesign","src","image","onClick","random","counter","id","Jumbotron","App","state","CardImages","clicks","images","indexOf","setState","console","log","Images","sort","randomImg","Math","this","map","CardD","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"29DAAAA,EAAOC,QAAU,IAA0B,kC,0FCErCC,G,kBAAS,CACXC,IAAK,CACDC,WAAY,OAWLC,MARf,SAAgBC,GACd,OACE,yBAAKC,MAAM,8BACT,0BAAMA,MAAM,uBAAuBC,MAAON,EAAOC,KAAjD,iBCRAD,EAAS,CACbO,MAAO,CACLL,WAAY,MAcDK,MAVf,SAAeH,GACb,OACE,yBAAKI,UAAU,aACb,wBAAIF,MAAON,EAAOO,OAAlB,SACQ,0BAAMC,UAAWR,EAAOO,OAAQH,EAAMK,OAD9C,aAEY,0BAAMD,UAAWR,EAAOO,OAAQH,EAAMM,a,mCCVlDV,EAAQ,CACVW,KAAM,CACFC,MAAO,QACPC,OAAQ,SAaDC,MAVf,SAAoBV,GACpB,OACI,yBAAKI,UAAU,SACX,yBAAKA,UAAU,IACd,yBAAKO,IAAKX,EAAMY,MAAOV,MAAON,EAAOW,KAAKM,QAAU,WAAYb,EAAMc,SAAUd,EAAMe,QAAQf,EAAMgB,IAAKhB,EAAMM,iB,OCEzGW,MAbf,WACE,OACE,yBAAKhB,MAAM,6BACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,eACA,uBAAGA,MAAM,QAAT,4DCmFOiB,E,4MAhFbC,MAAQ,CACNC,WAAY,GACZC,OAAQ,GACRhB,MAAO,EACPC,SAAU,G,EAIZS,QAAU,SAACO,IACmC,IAAvC,EAAKH,MAAME,OAAOE,QAAQD,GACzB,EAAKE,SAAS,CACVH,OAAO,GAAD,mBAAM,EAAKF,MAAME,QAAjB,CAAyBC,IAC/BjB,MAAO,EAAKc,MAAMd,MAAQ,EAC1BC,SAAU,EAAKa,MAAMd,SAGzBoB,QAAQC,IAAI,UACV,EAAKF,SAAS,CAACnB,MAAO,IACtB,EAAKmB,SAAS,CAACH,OAAQ,KACvB,EAAKG,SAAS,CAAClB,SAAU,EAAKa,MAAMd,U,EAS9CS,OAAS,WACP,IAAMF,EAAQ,EAAKO,MAAMQ,OACzB,EAAKH,SAAS,CACZJ,WAAYR,EAAMgB,MAAK,SAAAC,GACnB,IAAMf,EAASgB,KAAKhB,SACtB,OAAIA,EAAS,GACJ,EAELA,EAAS,IACH,EAED,Q,EAMfR,SAAW,WACJ,EAAKa,MAAMd,MAAQ,EAAKc,MAAMb,UACnC,EAAKkB,SAAS,CACVlB,SAAU,EAAKa,MAAMd,S,kEAQzB0B,KAAKP,SAAS,CAAEG,a,+BAGR,IAAD,OAMP,OACA,6BACG,kBAAC,EAAD,MACA,kBAAC,EAAD,MACC,kBAAC,EAAD,CAAOtB,MAAO0B,KAAKZ,MAAMd,QACzB,yBAAKD,UAAU,MAAMF,MATZ,CACHO,OAAQ,QASXkB,EAAOK,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CAAYC,IAAKD,EAAMjB,GAAGA,GAAIiB,EAAMjB,GAAIJ,MAAOqB,EAAMrB,MAAOE,OAAQ,EAAKA,OAAQC,QAAS,EAAKA,QAAST,SAAU,EAAKA,oB,GA1EjH6B,IAAMC,WCcTlB,MAZf,WACE,OACE,6BAKE,kBAAC,EAAD,QCLcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.62883387.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Styles = {\n    nav: {\n        fontWeight: 900\n    }\n}\nfunction Navbar(props) {\n  return (\n    <nav class=\"navbar navbar-dark bg-dark\">\n      <span class=\"navbar-brand mb-0 h1\" style={Styles.nav}>Clicky Game</span>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Styles = {\n  Score: {\n    fontWeight: 900,\n  },\n};\n\nfunction Score(props) {\n  return (\n    <div className=\"container\">\n      <h4 style={Styles.Score}>\n        Score:<span className={Styles.Score}>{props.score}</span>\n        Top Score:<span className={Styles.Score}>{props.topScore}</span>\n      </h4>\n    </div>\n  );\n}\nexport default Score;\n","import React from \"react\"\n// import GameRules from \"./gamerules\"\n\nconst Styles ={\n    card: {\n        width: \"200px\",\n        margin: \"20px\"\n    }\n}\nfunction CardDesign(props){\nreturn(\n    <div className=\"col-3\">\n        <div className=\"\">\n         <img src={props.image} style={Styles.card}onClick={ function() {props.random(); props.counter(props.id); props.topScore();}}/>\n        </div>\n    </div>\n);\n}\n\nexport default CardDesign;","import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <div class=\"jumbotron jumbotron-fluid\">\n      <div class=\"container\">\n        <h1 class=\"display-4\">Clicky Game</h1>\n        <p class=\"lead\">\n          This is a memory game. Don't click on an image twice! \n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport CardDesign from \"./cardDesign\";\nimport Navbar from \"./navbar\";\nimport Images from \"../img.json\";\nimport Score from \"./score\";\nimport Footer from \"./footer\";\nimport Jumbotron from \"./jumbotron\";\n\nclass App extends React.Component {\n  //need state\n  state = {\n    CardImages: [],\n    clicks: [],\n    score: 0,\n    topScore: 0,\n  };\n\n  //need counter\n  counter = (images) => {\n      if(this.state.clicks.indexOf(images) === -1 ){\n          this.setState({\n              clicks: [...this.state.clicks, images],\n              score: this.state.score + 1,\n              topScore: this.state.score\n          })\n      } else {\n          console.log(\"farley\")\n            this.setState({score: 0})\n            this.setState({clicks: []})\n            this.setState({topScore: this.state.score})\n      }\n  }\n  //conditionals for click images\n\n  //how to track images\n\n  //need tracker for image clicks\n  //need image randomizer\n  random = () =>  {\n    const image = this.state.Images;\n    this.setState({\n      CardImages: image.sort(randomImg => {\n          const random = Math.random()\n        if (random > .1) {\n          return 1;\n        }\n        if (random < .1) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }),\n    });\n  }\n\n  topScore = () => {\n      if(this.state.score > this.state.topScore){\n    this.setState({\n        topScore: this.state.score\n    })\n}\n  }\n\n\n  componentDidMount()\n  {\n    this.setState({ Images });\n  }\n  //need renderer FOR NEW component states\n  render() {\n      const Styles = {\n          space: {\n              margin: \"4px\"\n          }\n      }\n    return (\n    <div>\n       <Navbar />\n       <Jumbotron />\n        <Score score={this.state.score} />\n        <div className=\"row\" style={Styles.space}>\n          {Images.map(CardD => (\n            <CardDesign key={CardD.id}id={CardD.id} image={CardD.image} random={this.random} counter={this.counter} topScore={this.topScore}/>\n          ))}\n        </div>\n    </div>   \n    )\n}\n}\n\nexport default App;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n// import CardDesign from \"./components/cardDesign\"\nimport Navbar from \"./components/navbar\";\nimport Score from \"./components/score\";\nimport GameRules from \"./components/gamerules\"\nimport Jumbotron from \"./components/jumbotron\";\nimport Footer from \"./components/footer\";\n\nfunction App() {\n  return (\n    <div>\n      {/* <Navbar />\n      <Jumbotron />\n      <Score />\n      <Footer /> */}\n      <GameRules />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}